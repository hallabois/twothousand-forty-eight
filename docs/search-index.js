var searchIndex = JSON.parse('{\
"twothousand_forty_eight":{"doc":"a basic engine and move validator for the game 2048","t":[17,5,5,5,5,5,5,5,5,0,0,5,5,5,0,0,5,0,3,17,17,5,11,11,11,11,5,11,11,11,11,11,5,5,11,11,11,12,11,5,11,11,5,11,11,0,12,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,12,11,12,12,13,4,13,13,17,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,6,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,5,5,5],"n":["DEBUG_INFO","__wasm_bindgen_generated_add_random","__wasm_bindgen_generated_apply_move","__wasm_bindgen_generated_get_frames","__wasm_bindgen_generated_hash","__wasm_bindgen_generated_parse","__wasm_bindgen_generated_validate","add_random","apply_move","board","direction","get_frames","hash","parse","parser","recording","validate","validator","Board","MAX_HEIGHT","MAX_WIDTH","board_to_string","borrow","borrow_mut","clone","clone_into","create_tiles","default","deserialize","fmt","from","get_all_tiles","get_closest_tile","get_farthest_tile","get_non_occupied_tiles","get_occupied_tiles","get_total_value","height","into","is_move_possible","new","oispahalla_serialize","print_board","serialize","set_tile","tile","tiles","to_owned","try_from","try_into","type_id","vzip","width","Tile","borrow","borrow_mut","clone","clone_into","deserialize","eq","fmt","from","id","into","merged","new","oispahalla_serialize","serialize","to_owned","try_from","try_into","type_id","value","vzip","x","y","DOWN","Direction","END","LEFT","REAL_DIRECTIONS","RIGHT","UP","borrow","borrow_mut","clone","clone_into","deserialize","eq","fmt","from","from_index","from_index_str","get_index","get_x","get_y","into","serialize","to_owned","try_from","try_into","type_id","vzip","parse_data","History","Recording","borrow","borrow_mut","clone","clone_into","deserialize","fmt","from","hash_v1","height","history","into","serialize","to_owned","to_string","try_from","try_into","type_id","vzip","width","get_run_score","validate_first_move","validate_history"],"q":["twothousand_forty_eight","","","","","","","","","","","","","","","","","","twothousand_forty_eight::board","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","twothousand_forty_eight::board::tile","","","","","","","","","","","","","","","","","","","","","","","twothousand_forty_eight::direction","","","","","","","","","","","","","","","","","","","","","","","","","","","twothousand_forty_eight::parser","twothousand_forty_eight::recording","","","","","","","","","","","","","","","","","","","","","twothousand_forty_eight::validator","",""],"d":["","","","","","","","","","Provides Board to hold game board data and tile to hold …","Provides Direction to represent move directions","","","","","Provides Recording, to hold recorded games","","Provides functions to validate a Recording","Holds game board data","Max height of a board the program can handle. Be careful …","Max width of a board the program can handle. Be careful …","Return a debug visualization of the board","","","","","Initialize an array of empty tiles created with Tile::new","","","","","Get all tiles that exist ( aren’t None )","Return the closest tile with the value of “mask” to …","Return the farthest tile with the value of “mask” to …","Get the tiles that exist and which’s values are zero","Get the tiles that exist and which’s values are nonzero","Get the combined value of all the tiles","The height of the board. Value of 0 is untested","","Check if a move is possible in the direction “dir” and …","Create a new board with the height and width of 4 and …","Gives a representation of the board that is compatible …","Print a debug visualization of the board","","Set a tile on the board and silently fail if the target …","","The tiles of the board, note that the size of the array is …","","","","","","The width of the board. Value of 0 is untested","Tile is a basic representation of the tiles on the game …","","","","","","","","","a unique identifier for the tile, not preserved when tiles …","","a variable used in internal calculations, should be false","Create a new tile. If the “tile_id” feature is …","Gives a representation of the tile that is compatible with …","","","","","","value of the tile, usually in a power of two, e.g. 2, 4, …","","x coordinate of the tile, usize is always greater than zero","y coordinate of the tile, usize is always greater than zero","","A representation of the possible move directions during …","The game ended and this placeholder direction was provided","","A list of all the directions excluding the empty …","","","","","","","","","","","Get the corresponding direction of an index in the order: …","Get the corresponding direction of an index in the order: …","Get the index of the direction in the order: up, right, …","Get the X component of a direction, e.g. UP =&gt; 0, RIGHT =&gt; …","Get the Y component of a direction, e.g. UP =&gt; 1, RIGHT =&gt; …","","","","","","","","Parses a string representation of a played 2048 game into …","","Represents a recording of a played game of 2048, usually …","","","","","","","","Returns a hash of the history. The hash is only composed …","The height of the recorded game","The move history, containing data about the current board …","","","","Converts the recording back to a format the parser can …","","","","","The width of the recorded game","Returns the accumulated score of a run (should match the …","Makes sure that the starting state of the history doesn’…","Validates the history continuity and returns the …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,0,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0],"f":[null,[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["string",3]],[[["str",15],["usize",15],["bool",15]],["string",3]],null,null,[[["str",15]],["string",3]],[[["str",15]],["string",3]],[[["str",15]],["string",3]],null,null,[[["str",15]],["string",3]],null,null,null,null,[[["usize",15],["usize",15]],["string",3]],[[]],[[]],[[],["board",3]],[[]],[[["usize",15],["usize",15]]],[[],["board",3]],[[["",26],["",26]],["result",4,[["",26]]]],[[["formatter",3]],["result",6]],[[]],[[],["vec",3,[["tile",3]]]],[[["tile",3],["vec",3],["direction",4],["usize",15]],["tile",3]],[[["tile",3],["vec",3],["direction",4],["usize",15]],["tile",3]],[[],["vec",3,[["tile",3]]]],[[],["vec",3,[["tile",3]]]],[[],["usize",15]],null,[[]],[[["board",3],["direction",4]]],[[],["board",3]],[[],["string",3]],[[["usize",15],["usize",15]]],[[["",26],["",26]],["result",4]],[[["usize",15],["usize",15],["usize",15]]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[],["tile",3]],[[]],[[["",26],["",26]],["result",4,[["",26]]]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],null,[[]],null,[[["usize",15],["usize",15],["usize",15],["bool",15]],["tile",3]],[[],["string",3]],[[["",26],["",26]],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["direction",4]],[[]],[[["",26],["",26]],["result",4,[["",26]]]],[[["direction",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["usize",15]],["direction",4]],[[["str",15]],["direction",4]],[[],["str",15]],[[],["i64",15]],[[],["i64",15]],[[]],[[["",26],["",26]],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["string",3]],["recording",3]],null,null,[[]],[[]],[[],["recording",3]],[[]],[[["",26],["",26]],["result",4,[["",26]]]],[[["formatter",3]],["result",6]],[[]],[[],["string",3]],null,null,[[]],[[["",26],["",26]],["result",4]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[["recording",3]],["usize",15]],[[["recording",3]],["bool",15]],[[["recording",3]]]],"p":[[3,"Board"],[3,"Tile"],[4,"Direction"],[3,"Recording"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};